{"remainingRequest":"/Users/alex/Desktop/myproject/node_modules/_vue-loader@15.7.2@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/alex/Desktop/myproject/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--0-0!/Users/alex/Desktop/myproject/node_modules/_vue-loader@15.7.2@vue-loader/lib/index.js??vue-loader-options!/Users/alex/Desktop/myproject/src/views/bargainDev.vue?vue&type=template&id=6cad50bd&scoped=true&","dependencies":[{"path":"/Users/alex/Desktop/myproject/src/views/bargainDev.vue","mtime":1574700292859},{"path":"/Users/alex/Desktop/myproject/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/alex/Desktop/myproject/node_modules/_vue-loader@15.7.2@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/alex/Desktop/myproject/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/alex/Desktop/myproject/node_modules/_vue-loader@15.7.2@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IHN0YXRpY0NsYXNzOiAid3JhcCIgfSwKICAgIFsKICAgICAgX2MoIm11c2ljIiksCiAgICAgIF9jKCJ1c2VyLWNlbnRlciIpLAogICAgICBfYygidGhlbWUtYWN0aXZpdHkiKSwKICAgICAgX2MoInNwZWNpYWwiKSwKICAgICAgX2MoImltZyIsIHsKICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltZy9iYXJnYWluLWhlYWQuanBlZyIpLCB3aWR0aDogIjEwMCUiIH0KICAgICAgfSksCiAgICAgIF9jKCJ0aXRsZS1hY3RpdmUiLCB7CiAgICAgICAgbW9kZWw6IHsKICAgICAgICAgIHZhbHVlOiBfdm0ubWV0YURhdGEuYWN0aXZpdHlOYW1lLAogICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICBfdm0uJHNldChfdm0ubWV0YURhdGEsICJhY3Rpdml0eU5hbWUiLCAkJHYpCiAgICAgICAgICB9LAogICAgICAgICAgZXhwcmVzc2lvbjogIm1ldGFEYXRhLmFjdGl2aXR5TmFtZSIKICAgICAgICB9CiAgICAgIH0pLAogICAgICBfYygKICAgICAgICAiY29udGVudC13cmFwIiwKICAgICAgICBbCiAgICAgICAgICBfYygiY3JlYXRlLXRpbWUiLCB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgc3RhcnRUaW1lOiBfdm0ubWV0YURhdGEuc3RhcnRUaW1lLAogICAgICAgICAgICAgIGVuZFRpbWU6IF92bS5tZXRhRGF0YS5lbmRUaW1lCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgInVwZGF0ZTpzdGFydFRpbWUiOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfdm0uJHNldChfdm0ubWV0YURhdGEsICJzdGFydFRpbWUiLCAkZXZlbnQpCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAidXBkYXRlOnN0YXJ0LXRpbWUiOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfdm0uJHNldChfdm0ubWV0YURhdGEsICJzdGFydFRpbWUiLCAkZXZlbnQpCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAidXBkYXRlOmVuZFRpbWUiOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfdm0uJHNldChfdm0ubWV0YURhdGEsICJlbmRUaW1lIiwgJGV2ZW50KQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInVwZGF0ZTplbmQtdGltZSI6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgcmV0dXJuIF92bS4kc2V0KF92bS5tZXRhRGF0YSwgImVuZFRpbWUiLCAkZXZlbnQpCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfYygKICAgICAgICAiY29udGVudC13cmFwIiwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgInZhbi11cGxvYWRlciIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNlbnRlciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgIm1heC1jb3VudCI6IDEsICJhZnRlci1yZWFkIjogX3ZtLmFmdGVyUmVhZCB9LAogICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICBkZWxldGU6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmltZ0RlbGV0ZSgiZ2lmdCIpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBuYXRpdmVPbjogewogICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmNsaWNrSXRlbSgiZ2lmdCIpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgICAgdmFsdWU6IF92bS5tZXRhRGF0YS5naWZ0LAogICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgICAgICBfdm0uJHNldChfdm0ubWV0YURhdGEsICJnaWZ0IiwgJCR2KQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJtZXRhRGF0YS5naWZ0IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidXBsb2FkIiB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygidmFuLWljb24iLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgImZvbnQtc2l6ZSI6ICI1MHB4IiB9LAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IG5hbWU6ICJwaG90byIgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiMTBweCIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCLkuIrkvKDllYblk4Hlm77niYciKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0KICAgICAgICAgICksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIngtYXJlYSIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImxhYmVsLWl0ZW0iIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLl92KCIg5Y6f5Lu377yaICIpLAogICAgICAgICAgICAgICAgX2MoInZhbi1maWVsZCIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ2LWlucHV0IiwKICAgICAgICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLm1ldGFEYXRhLm9yaWdpbmFsUHJpY2UsCiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLm1ldGFEYXRhLCAib3JpZ2luYWxQcmljZSIsICQkdikKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJtZXRhRGF0YS5vcmlnaW5hbFByaWNlIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNTdHlsZTogeyBjb2xvcjogInJlZCIgfSB9LCBbX3ZtLl92KCLlhYMiKV0pCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibGFiZWwtaXRlbSIgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIiDlupXku7fvvJogIiksCiAgICAgICAgICAgICAgICBfYygidmFuLWZpZWxkIiwgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInYtaW5wdXQiLAogICAgICAgICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ubWV0YURhdGEuZmxvb3JQcmljZSwKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICBfdm0uJHNldChfdm0ubWV0YURhdGEsICJmbG9vclByaWNlIiwgJCR2KQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIm1ldGFEYXRhLmZsb29yUHJpY2UiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY1N0eWxlOiB7IGNvbG9yOiAicmVkIiB9IH0sIFtfdm0uX3YoIuWFgyIpXSkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIngtdGl0bGUiIH0sIFtfdm0uX3YoIuavj+asoeWHj+S7t+WHj+WwkeiMg+WbtCIpXSksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ4LWFyZWEiLCBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICIxMHB4IDAiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImxhYmVsLWl0ZW0iIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIOacgOWwke+8miAiKSwKICAgICAgICAgICAgICAgICAgX2MoInZhbi1maWVsZCIsIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInYtaW5wdXQiLAogICAgICAgICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLm1ldGFEYXRhLm1pblJlZHVjdGlvbiwKICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLm1ldGFEYXRhLCAibWluUmVkdWN0aW9uIiwgJCR2KQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJtZXRhRGF0YS5taW5SZWR1Y3Rpb24iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY1N0eWxlOiB7IGNvbG9yOiAicmVkIiB9IH0sIFtfdm0uX3YoIuWFgyIpXSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJsYWJlbC1pdGVtIiB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIiDmnIDlpJrvvJogIiksCiAgICAgICAgICAgICAgICAgIF9jKCJ2YW4tZmllbGQiLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ2LWlucHV0IiwKICAgICAgICAgICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5tZXRhRGF0YS5tYXhSZWR1Y3Rpb24sCiAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS5tZXRhRGF0YSwgIm1heFJlZHVjdGlvbiIsICQkdikKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAibWV0YURhdGEubWF4UmVkdWN0aW9uIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNTdHlsZTogeyBjb2xvcjogInJlZCIgfSB9LCBbX3ZtLl92KCLlhYMiKV0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIngtdGl0bGUiLCBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICLlj4LogIPlhazlvI/vvJrvvIjljp/ku7ct5bqV5Lu377yJ4p6XIOWkp+iHtOW4ruWHj+S6uuaVsD3luK7lh4/ojIPlm7TlubPlnYfmlbDvvIzluK7lh4/ojIPlm7TlubPlnYfmlbAtNT3mnIDlsI/lgLzvvIzluK7lh4/ojIPlm7TlubPlnYfmlbArNT3mnIDlpKflgLzjgILlu7rorq7orr7nva4zMC00MOS6uuW4ruWHj+WNs+WPr+WHj+iHs+W6leS7tyIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0KICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ4LWFyZWEiLCBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICIxMHB4IDAiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImxhYmVsLWl0ZW0iIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIOaKpeWQjeiAheavj+malCAiKSwKICAgICAgICAgICAgICAgICAgX2MoInZhbi1maWVsZCIsIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInYtaW5wdXQiLAogICAgICAgICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLm1ldGFEYXRhLnJlc3RyaWN0VGltZSwKICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLm1ldGFEYXRhLCAicmVzdHJpY3RUaW1lIiwgJCR2KQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJtZXRhRGF0YS5yZXN0cmljdFRpbWUiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY1N0eWxlOiB7IGNvbG9yOiAicmVkIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIuWwj+aXtiIpCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIuWPr+WGjeasoee7meiHquW3seWHj+S7tyAiKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0KICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ4LXRpdGxlIiwgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAi5q+P5Liq5oql5ZCN6ICF5Y+v5Zyo5rS75Yqo5pe26Ze05YaF5aSa5qyh6Ieq5bex5YeP5Lu377yM5biu5b+Z6ICF5LuF5pyJ5LiA5qyh5py65Lya77yb5aaC5pyJ55So5oi35oql5ZCN77yM5q2k5pe26Ze05Y+v5YeP5LiN5Y+v5aKeIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXQogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfYygKICAgICAgICAiY29udGVudC13cmFwIiwKICAgICAgICB7IGF0dHJzOiB7IHRpdGxlOiAi5aWW5ZOB5o+P6L+wIiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ4LWFyZWEiLAogICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjEwcHggMCIsICJqdXN0aWZ5LWNvbnRlbnQiOiAiY2VudGVyIiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJsYWJlbC1pdGVtIiB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIiDmnKzmnJ/lpZblk4EgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJ2YW4tZmllbGQiLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ2LWlucHV0IiwKICAgICAgICAgICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5tZXRhRGF0YS5naWZ0TmFtZSwKICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLm1ldGFEYXRhLCAiZ2lmdE5hbWUiLCAkJHYpCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIm1ldGFEYXRhLmdpZnROYW1lIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAieC10aXRsZSIsIHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LAogICAgICAgICAgICBbX3ZtLl92KCLlpoLmnInnlKjmiLfmiqXlkI3vvIzlpZblk4HmlbDph4/lj6/lop7kuI3lj6/lh4/vvIzosKjmhY7loavlhpkiKV0KICAgICAgICAgICksCiAgICAgICAgICBfYygiYWRkLWNvbXBvbmVudCIsIHsKICAgICAgICAgICAgYXR0cnM6IHsgYWN0aXZlTGlzdDogX3ZtLm1ldGFEYXRhLnByaXplRGVzY3JpcHRpb24gfSwKICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAidXBkYXRlOmFjdGl2ZUxpc3QiOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfdm0uJHNldChfdm0ubWV0YURhdGEsICJwcml6ZURlc2NyaXB0aW9uIiwgJGV2ZW50KQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInVwZGF0ZTphY3RpdmUtbGlzdCI6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgcmV0dXJuIF92bS4kc2V0KF92bS5tZXRhRGF0YSwgInByaXplRGVzY3JpcHRpb24iLCAkZXZlbnQpCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfYygiY29udGVudC13cmFwIiwgeyBhdHRyczogeyB0aXRsZTogIuS4u+WKnuaWueWQjeeJhyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ4LXRpdGxlIiwgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJ2YW4taWNvbiIsIHsgYXR0cnM6IHsgbmFtZTogIndhcm5pbmciIH0gfSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAi5a6M5ZaE55qE5Li75Yqe5pa55L+h5oGv5Y+v5Lul6K6p55So5oi35pu05YWo5pa55L2N5Zyw5LqG6Kej5Li75Yqe5pa577yM5Y+v5Lul5b6I5aW955qE5o+Q6auY5rS75Yqo5pWI5p6cICIKICAgICAgICAgICAgKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGl0bGUtMjMiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgY29sb3I6ICIjMTBhZWZmIiwKICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICIjZmZmIiwKICAgICAgICAgICAgICAgIHBhZGRpbmc6ICIwIDEwcHgiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCLln7rmnKzkv6Hmga8iKV0KICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogIngtYXJlYSIsIHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjEwcHggMCIgfSB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygidmFuLXVwbG9hZGVyIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicm91bmQiLAogICAgICAgICAgICAgIGF0dHJzOiB7ICJtYXgtY291bnQiOiAxLCAiYWZ0ZXItcmVhZCI6IF92bS5hZnRlclJlYWQgfSwKICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgZGVsZXRlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5pbWdEZWxldGUoInRodW1ibmFpbCIpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmNsaWNrSXRlbSgidGh1bWJuYWlsIikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLm1ldGFEYXRhLnRodW1ibmFpbCwKICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLm1ldGFEYXRhLCAidGh1bWJuYWlsIiwgJCR2KQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJtZXRhRGF0YS50aHVtYm5haWwiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjIwMHB4IiB9IH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoInZhbi1maWVsZCIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjLXRleHRhcmVhIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICByb3dzOiAiMSIsCiAgICAgICAgICAgICAgICAgICAgYXV0b3NpemU6ICIiLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJ0ZXh0YXJlYSIsCiAgICAgICAgICAgICAgICAgICAgbWF4bGVuZ3RoOiAiMTUiLAogICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAi5q2k5aSE6L6T5YWl5Li75Yqe5pa55ZCN56ew5oiW5ZOB54mM5ZCNIiwKICAgICAgICAgICAgICAgICAgICAic2hvdy13b3JkLWxpbWl0IjogIiIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLm1ldGFEYXRhLmNvbXBhbnlOYW1lLAogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS5tZXRhRGF0YSwgImNvbXBhbnlOYW1lIiwgJCR2KQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIm1ldGFEYXRhLmNvbXBhbnlOYW1lIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKCJ2YW4tZmllbGQiLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYy10ZXh0YXJlYSIsCiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tdG9wIjogIjIwcHgiIH0sCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgcm93czogIjEiLAogICAgICAgICAgICAgICAgICAgIGF1dG9zaXplOiAiIiwKICAgICAgICAgICAgICAgICAgICB0eXBlOiAidGV4dGFyZWEiLAogICAgICAgICAgICAgICAgICAgIG1heGxlbmd0aDogIjEwMCIsCiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICLmraTlpITovpPlhaXkuLvlip7mlrnnroDopoHku4vnu40iLAogICAgICAgICAgICAgICAgICAgICJzaG93LXdvcmQtbGltaXQiOiAiIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ubWV0YURhdGEuY29tcGFueURlc2NyaXB0aW9uLAogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS5tZXRhRGF0YSwgImNvbXBhbnlEZXNjcmlwdGlvbiIsICQkdikKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJtZXRhRGF0YS5jb21wYW55RGVzY3JpcHRpb24iCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRpdGxlLTIzIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgIGNvbG9yOiAiIzEwYWVmZiIsCiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAiI2ZmZiIsCiAgICAgICAgICAgICAgICBwYWRkaW5nOiAiMCAxMHB4IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigi5ZKo6K+i55S16K+dIildCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ4LWFyZWEiLCBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICIxMHB4IDAiIH0gfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJsYWJlbC1pdGVtIiwgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIxMDAlIiB9IH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoInZhbi1maWVsZCIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ2LWlucHV0IiwKICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIxMDAlIiB9LAogICAgICAgICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ubWV0YURhdGEucGhvbmUsCiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLm1ldGFEYXRhLCAicGhvbmUiLCAkJHYpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAibWV0YURhdGEucGhvbmUiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0KICAgICAgICApLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAieC10aXRsZSIgfSwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAi5o+Q56S677ya5a6i5oi35Y+v5Lul6YCa6L+H5q2k55S16K+d55u05o6l5ZKo6K+i77yM5bu66K6u55WZ5LiL5omL5py65Y+35L+d5oyB5omL5py655WF6YCa77yI5LiN55WZ55S16K+d5YiZ5LiN5pi+56S677yJIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGl0bGUtMjMiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgY29sb3I6ICIjMTBhZWZmIiwKICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICIjZmZmIiwKICAgICAgICAgICAgICAgIHBhZGRpbmc6ICIwIDEwcHgiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCLpgInmi6nkvY3nva4iKV0KICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImxvY2F0aW9uIiB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygidmFuLWljb24iLCB7IGF0dHJzOiB7IG5hbWU6ICJsb2NhdGlvbiIgfSB9KSwKICAgICAgICAgICAgX3ZtLl92KCLpgInmi6nkuLvlip7mlrnlnLDlnYAgIikKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogIngtdGl0bGUiLCBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIuaPkOekuu+8muS4jemAieaLqeWImeS4jeaYvuekuiIpXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJjb250ZW50LXdyYXAiLCB7IGF0dHJzOiB7IHRpdGxlOiAi5L+h5oGv5pS26ZuG6K6+572uIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogIngtdGl0bGUiIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJ2YW4taWNvbiIsIHsgYXR0cnM6IHsgbmFtZTogImluZm8iIH0gfSksCiAgICAgICAgICAgIF92bS5fdigi5Y+v5Lul5qC55o2u5rS75Yqo5YW35L2T6ZyA5rGC5p2l6K6+5a6a6ZyA6KaB5pS26ZuG5a6i5oi355qE5L+h5oGv5a2X5q61ICIpCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ4LXRpdGxlIiB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygidmFuLWljb24iLCB7IGF0dHJzOiB7IG5hbWU6ICJpbmZvIiB9IH0pLAogICAgICAgICAgICBfdm0uX3YoIuiHquWumuS5iemhueS4uuepuuWImeS4jeaYvuekuu+8jOacgOWkmuWPr+S7peWhq+WGmTbkuKrlrZcgIikKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogIngtdGl0bGUiIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJ2YW4taWNvbiIsIHsgYXR0cnM6IHsgbmFtZTogImluZm8iIH0gfSksCiAgICAgICAgICAgIF92bS5fdigi5aaC5p6c55So5oi35oql5ZCN77yM5q2k5YaF5a655LiN5Y+v5YaN5YGa5Lu75L2V5L+u5pS5ICIpCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ4LXRpdGxlIiB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygidmFuLWljb24iLCB7IGF0dHJzOiB7IG5hbWU6ICJpbmZvIiB9IH0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljU3R5bGU6IHsgY29sb3I6ICJyZWQiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICLosKjmhY7orr7lrproh6rlrprkuYnkv6Hmga/mlLbpm4bvvIzopoHmsYLloavlhpnov4flpJrkv6Hmga/vvIzmiqXlkI3mlbDlsIblpKflpKfpmY3kvY4iCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAieC1hcmVhIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibGFiZWwtaXRlbSIgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJ2YW4tZmllbGQiLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInYtaW5wdXQiLAogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIzcmVtIiB9LAogICAgICAgICAgICAgICAgYXR0cnM6IHsgcGxhY2Vob2xkZXI6ICLkv6Hmga/pobnlkI3np7AiIH0sCiAgICAgICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLm1ldGFEYXRhLnF1ZXN0aW9uMSwKICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS5tZXRhRGF0YSwgInF1ZXN0aW9uMSIsICQkdikKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIm1ldGFEYXRhLnF1ZXN0aW9uMSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAibGFiZWwtaXRlbSIgfSwgW192bS5fdigiIOW/heWhq+mhuSAiKV0pCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ4LWFyZWEiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJsYWJlbC1pdGVtIiB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoInZhbi1maWVsZCIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidi1pbnB1dCIsCiAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjNyZW0iIH0sCiAgICAgICAgICAgICAgICBhdHRyczogeyBwbGFjZWhvbGRlcjogIuS/oeaBr+mhueWQjeensCIgfSwKICAgICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ubWV0YURhdGEucXVlc3Rpb24yLAogICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7CiAgICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLm1ldGFEYXRhLCAicXVlc3Rpb24yIiwgJCR2KQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAibWV0YURhdGEucXVlc3Rpb24yIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJsYWJlbC1pdGVtIiB9LCBbX3ZtLl92KCIg5b+F5aGr6aG5ICIpXSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIngtYXJlYSIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImxhYmVsLWl0ZW0iIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygidmFuLWZpZWxkIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ2LWlucHV0IiwKICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiM3JlbSIgfSwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IHBsYWNlaG9sZGVyOiAi5L+h5oGv6aG55ZCN56ewIiB9LAogICAgICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5tZXRhRGF0YS5xdWVzdGlvbjMsCiAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgICBfdm0uJHNldChfdm0ubWV0YURhdGEsICJxdWVzdGlvbjMiLCAkJHYpCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJtZXRhRGF0YS5xdWVzdGlvbjMiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImxhYmVsLWl0ZW0iIH0sIFtfdm0uX3YoIiDlv4XloavpobkgIildKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAieC1hcmVhIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibGFiZWwtaXRlbSIgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJ2YW4tZmllbGQiLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInYtaW5wdXQiLAogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIzcmVtIiB9LAogICAgICAgICAgICAgICAgYXR0cnM6IHsgcGxhY2Vob2xkZXI6ICLkv6Hmga/pobnlkI3np7AiIH0sCiAgICAgICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLm1ldGFEYXRhLnF1ZXN0aW9uNCwKICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS5tZXRhRGF0YSwgInF1ZXN0aW9uNCIsICQkdikKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIm1ldGFEYXRhLnF1ZXN0aW9uNCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAibGFiZWwtaXRlbSIgfSwgW192bS5fdigiIOW/heWhq+mhuSAiKV0pCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ4LWFyZWEiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJsYWJlbC1pdGVtIiB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoInZhbi1maWVsZCIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidi1pbnB1dCIsCiAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjNyZW0iIH0sCiAgICAgICAgICAgICAgICBhdHRyczogeyBwbGFjZWhvbGRlcjogIuS/oeaBr+mhueWQjeensCIgfSwKICAgICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ubWV0YURhdGEucXVlc3Rpb241LAogICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7CiAgICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLm1ldGFEYXRhLCAicXVlc3Rpb241IiwgJCR2KQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAibWV0YURhdGEucXVlc3Rpb241IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJsYWJlbC1pdGVtIiB9LCBbX3ZtLl92KCIg5b+F5aGr6aG5ICIpXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoCiAgICAgICAgImNvbnRlbnQtd3JhcCIsCiAgICAgICAgeyBhdHRyczogeyB0aXRsZTogIua0u+WKqOinhOWImSIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJ2LXRleHRhcmVhIiwgewogICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgIHZhbHVlOiBfdm0ubWV0YURhdGEuYWN0aXZpdHlSdWxlLAogICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS5tZXRhRGF0YSwgImFjdGl2aXR5UnVsZSIsICQkdikKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGV4cHJlc3Npb246ICJtZXRhRGF0YS5hY3Rpdml0eVJ1bGUiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJjb250ZW50LXdyYXAiLAogICAgICAgIHsgYXR0cnM6IHsgdGl0bGU6ICLpooblpZbkv6Hmga8iIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygidi10ZXh0YXJlYSIsIHsKICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICB2YWx1ZTogX3ZtLm1ldGFEYXRhLnByaXplSW5mbywKICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7CiAgICAgICAgICAgICAgICBfdm0uJHNldChfdm0ubWV0YURhdGEsICJwcml6ZUluZm8iLCAkJHYpCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBleHByZXNzaW9uOiAibWV0YURhdGEucHJpemVJbmZvIgogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfYygKICAgICAgICAiY29udGVudC13cmFwIiwKICAgICAgICB7IGF0dHJzOiB7IHRpdGxlOiAi5bqX5YaF5LyY5oOgIiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAieC10aXRsZSIgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJ2YW4taWNvbiIsIHsgYXR0cnM6IHsgbmFtZTogImluZm8iIH0gfSksCiAgICAgICAgICAgICAgX3ZtLl92KCLlnKjmraTloavlhpnmgqjnmoTlupflhoXkvJjmg6DmiJbogIXmtLvliqjkvJjmg6DlhoXlrrkgIikKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIngtdGl0bGUiIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygidmFuLWljb24iLCB7IGF0dHJzOiB7IG5hbWU6ICJpbmZvIiB9IH0pLAogICAgICAgICAgICAgIF92bS5fdigi56ys5LiA5p2h5LiN5aGr5YaZ77yM5YiZ5LiN5pi+56S6ICIpCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ4LXRpdGxlIiB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoInZhbi1pY29uIiwgeyBhdHRyczogeyBuYW1lOiAiaW5mbyIgfSB9KSwKICAgICAgICAgICAgICBfdm0uX3YoIuacgOWkmuWPr+iuvue9rjIw5p2h5LyY5oOg5YaF5a65ICIpCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygiYWRkLWZpbGUiLCB7CiAgICAgICAgICAgIGF0dHJzOiB7IGFjdGl2ZUxpc3Q6IF92bS5tZXRhRGF0YS5kaXNjb3VudCB9LAogICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICJ1cGRhdGU6YWN0aXZlTGlzdCI6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgcmV0dXJuIF92bS4kc2V0KF92bS5tZXRhRGF0YSwgImRpc2NvdW50IiwgJGV2ZW50KQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInVwZGF0ZTphY3RpdmUtbGlzdCI6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgcmV0dXJuIF92bS4kc2V0KF92bS5tZXRhRGF0YSwgImRpc2NvdW50IiwgJGV2ZW50KQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX2MoIm9yZGVyLXNvZnQiKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgeyBzdGF0aWNDbGFzczogImZvb3RlciIgfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgInZhbi1idXR0b24iLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICIjZWNlY2VjIiwKICAgICAgICAgICAgICAgICJib3JkZXItY29sb3IiOiAiI2VjZWNlYyIsCiAgICAgICAgICAgICAgICBjb2xvcjogIiMwYjIwNmQiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBhdHRyczogeyByb3VuZDogIiIsIHR5cGU6ICJpbmZvIiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIumihOiniOa0u+WKqCIpXQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAidmFuLWJ1dHRvbiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyBiYWNrZ3JvdW5kOiAiIzBiMjA2ZCIsICJib3JkZXItY29sb3IiOiAiIzBiMjA2ZCIgfSwKICAgICAgICAgICAgICBhdHRyczogeyByb3VuZDogIiIsIHR5cGU6ICJpbmZvIiB9LAogICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uc2F2ZSB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIuS/neWtmOa0u+WKqCIpXQogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApCiAgICBdLAogICAgMQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}